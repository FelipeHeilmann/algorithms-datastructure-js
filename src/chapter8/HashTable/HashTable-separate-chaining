import { LinkedList } from "../../chapter6/singleLinkedList/LinkedList"
import { ValuePair } from "../ValueKeyPair"
import { defaultToString } from "../utils"

export class HashTableSeparateChaining<K, V>{
    protected table: { [key: string]: LinkedList<ValuePair<K, V>> }

    constructor(protected toStrFn: (key: K) => string = defaultToString) {
        this.table = {};
    }
    private loseloseHashCode(key: K): number {
        if (typeof key === "number") {
            return key
        }
        const tableKey = this.toStrFn(key)
        let hash = 0
        for (let i = 0; i < tableKey.length; i++) {
            hash += tableKey.charCodeAt(i)
        }
        return hash % 37
    }

    hashCode(key: K): number {
        return this.loseloseHashCode(key)
    }
    put(key: K, value: V): boolean {
        if (key !== null && value !== null) {
            const position = this.hashCode(key)
            if (this.table[position] == null) {
                this.table[position] = new LinkedList()
            }
            this.table[position].push(new ValuePair(key, value))

            return true
        }

        return false
    }
    get(key: K): V | undefined {
        const position = this.hashCode(key)
        const linkedList = this.table[position]
        if (linkedList !== null) {
            let current = linkedList.getHead()
            while (current !== null) {
                if (current?.element.key === key) {
                    return current.element.value
                }
                current = current?.next
            }
        }
        return undefined
    }
    remove(key: K): boolean {
        const position = this.hashCode(key)
        const linkedList = this.table[position]
        if (linkedList !== null && !linkedList.isEmpty()) {
            let current = linkedList.getHead()
            while (current !== null) {
                if (current?.element.key === key) {
                    linkedList.remove(current.element)
                    if (linkedList.isEmpty()) {
                        delete this.table[position]
                    }
                    return true
                }
                current = current?.next
            }
        }
        return false
    }
}   